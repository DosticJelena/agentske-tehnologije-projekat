{"version":3,"sources":["components/AgentCenter/AgentCenter.js","App.js","serviceWorker.js","index.js"],"names":["AgentCenter","props","showNodesFunction","setState","showAgents","showNodes","showMessages","showAgentsFunction","showMessagesFunction","state","className","onClick","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAgHeA,E,kDA5GX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,kBAAoB,WAChB,EAAKC,SAAS,CAAEC,YAAY,EAAOC,WAAW,EAAMC,cAAc,KAVnD,EAanBC,mBAAqB,WACjB,EAAKJ,SAAS,CAAEC,YAAY,EAAMC,WAAW,EAAOC,cAAc,KAdnD,EAiBnBE,qBAAuB,WACnB,EAAKL,SAAS,CAAEC,YAAY,EAAOC,WAAW,EAAOC,cAAc,KAhBnE,EAAKG,MAAQ,CACTJ,WAAW,EACXD,YAAY,EACZE,cAAc,GALH,E,qDAsBf,OACI,yBAAKI,UAAU,eACX,2CACI,4BACIC,QAASC,KAAKV,kBACdQ,UAAWE,KAAKH,MAAMJ,UAAY,+BAAiC,qBAFvE,SAKA,4BACIM,QAASC,KAAKL,mBACdG,UAAWE,KAAKH,MAAML,WAAa,+BAAiC,qBAFxE,UAKA,4BACIO,QAASC,KAAKJ,qBACdE,UAAWE,KAAKH,MAAMH,aAAe,+BAAiC,qBAF1E,aAMJ,6BACA,6BACCM,KAAKH,MAAMJ,UACR,yBAAKK,UAAU,OACX,yBAAKA,UAAU,SACX,gDACA,6BACA,yBAAKA,UAAU,kBACX,0CAAe,+CACf,oCAAS,uCACT,qCAAU,2CAEd,6BACA,8CAAmB,yCACnB,6BACA,yBAAKA,UAAU,kBACX,0CAAe,+CACf,oCAAS,uCACT,qCAAU,4CAGlB,yBAAKA,UAAU,SACX,yCACA,6BACA,yBAAKA,UAAU,aACX,+BACI,4BAAI,0CAAmB,oCAAa,sCACpC,4BAAI,4CAAqB,oCAAa,yCACtC,4BAAI,4CAAqB,oCAAa,6CAKpD,KACLE,KAAKH,MAAML,WACR,yBAAKM,UAAU,OACX,yBAAKA,UAAU,SACX,2CACA,6BACA,6BACA,2CACA,8BAEJ,yBAAKA,UAAU,SACX,8CACA,+BAGN,KACLE,KAAKH,MAAMH,aACR,yBAAKI,UAAU,OACX,yBAAKA,UAAU,SACX,6CACA,8BAEJ,yBAAKA,UAAU,SACX,8CACA,+BAGN,U,GAvGIG,IAAMC,W,MCUjBC,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1628962e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AgentCenter extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showNodes: true,\r\n            showAgents: false,\r\n            showMessages: false\r\n        }\r\n    }\r\n\r\n    showNodesFunction = () => {\r\n        this.setState({ showAgents: false, showNodes: true, showMessages: false });\r\n    }\r\n\r\n    showAgentsFunction = () => {\r\n        this.setState({ showAgents: true, showNodes: false, showMessages: false });\r\n    }\r\n\r\n    showMessagesFunction = () => {\r\n        this.setState({ showAgents: false, showNodes: false, showMessages: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AgentCenter\">\r\n                <h1>Agent Center\r\n                    <button\r\n                        onClick={this.showNodesFunction}\r\n                        className={this.state.showNodes ? \"btn show-hide-btn active-btn\" : \"btn show-hide-btn\"}>\r\n                        Nodes\r\n                    </button>\r\n                    <button\r\n                        onClick={this.showAgentsFunction}\r\n                        className={this.state.showAgents ? \"btn show-hide-btn active-btn\" : \"btn show-hide-btn\"}>\r\n                        Agents\r\n                    </button>\r\n                    <button\r\n                        onClick={this.showMessagesFunction}\r\n                        className={this.state.showMessages ? \"btn show-hide-btn active-btn\" : \"btn show-hide-btn\"}>\r\n                        Messages\r\n                    </button>\r\n                </h1>\r\n                <hr />\r\n                <br />\r\n                {this.state.showNodes ?\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                            <h2>Master Node Info</h2>\r\n                            <hr />\r\n                            <div className=\"this-node-info\">\r\n                                <p>IP Address: <span>192.168.0.20</span></p>\r\n                                <p>Port: <span>8080</span></p>\r\n                                <p>Alias: <span>desktop</span></p>\r\n                            </div>\r\n                            <br />\r\n                            <h2>This Node Info <h4>[master]</h4></h2>\r\n                            <hr />\r\n                            <div className=\"this-node-info\">\r\n                                <p>IP Address: <span>192.168.0.20</span></p>\r\n                                <p>Port: <span>8080</span></p>\r\n                                <p>Alias: <span>desktop</span></p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                            <h2>All Nodes</h2>\r\n                            <hr />\r\n                            <div className=\"all-nodes\">\r\n                                <table>\r\n                                    <tr><td>IP Address</td><td>Port</td><td>Alias</td></tr>\r\n                                    <tr><td>192.168.0.33</td><td>8080</td><td>desktop2</td></tr>\r\n                                    <tr><td>192.168.0.40</td><td>8080</td><td>desktop3</td></tr>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : null}\r\n                {this.state.showAgents ?\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                            <h2>Agent Types</h2>\r\n                            <hr />\r\n                            <br />\r\n                            <h2>Start Agent</h2>\r\n                            <hr />\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                            <h2>Running Agents</h2>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                    : null}\r\n                {this.state.showMessages ?\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                            <h2>Performatives</h2>\r\n                            <hr />\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                            <h2>Create Message</h2>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                    : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AgentCenter;","import React from 'react';\nimport AgentCenter from './components/AgentCenter/AgentCenter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AgentCenter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}